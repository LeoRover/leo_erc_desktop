#!/usr/bin/env python3

import rospy
import PyKDL

from geometry_msgs.msg import Pose
from nav_msgs.msg import Odometry


def pose_to_frame(pose: Pose):
    return PyKDL.Frame(
        PyKDL.Rotation.Quaternion(
            pose.orientation.x,
            pose.orientation.y,
            pose.orientation.z,
            pose.orientation.w,
        ),
        PyKDL.Vector(pose.position.x, pose.position.y, pose.position.z),
    )


def frame_to_pose(frame):
    pose = Pose()
    pose.position.x = frame.p.x()
    pose.position.y = frame.p.y()
    pose.position.z = frame.p.z()
    (
        pose.orientation.x,
        pose.orientation.y,
        pose.orientation.z,
        pose.orientation.w,
    ) = frame.M.GetQuaternion()
    return pose


rospy.init_node("ground_truth_filter")

x_offset = rospy.get_param("~x_offset", 0.0)
y_offset = rospy.get_param("~y_offset", 0.0)
z_offset = rospy.get_param("~z_offset", 0.0)
yaw_offset = rospy.get_param("~yaw_offset", 0.0)

offset = PyKDL.Frame(
    PyKDL.Rotation.RotZ(yaw_offset), PyKDL.Vector(x_offset, y_offset, z_offset)
).Inverse()


def ground_truth_raw_callback(msg: Odometry):
    frame = offset * pose_to_frame(msg.pose.pose)
    msg.pose.pose = frame_to_pose(frame)

    ground_truth_pub.publish(msg)


ground_truth_pub = rospy.Publisher("ground_truth", Odometry, queue_size=1)

ground_truth_sub = rospy.Subscriber(
    "ground_truth_raw", Odometry, ground_truth_raw_callback, queue_size=1
)

rospy.spin()

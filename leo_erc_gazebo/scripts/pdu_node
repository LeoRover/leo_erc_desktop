#!/usr/bin/env python

import rospy

from geometry_msgs.msg import Point, Quaternion, Pose
from std_srvs.srv import Trigger, TriggerResponse
from std_msgs.msg import Empty, UInt8
from gazebo_msgs.srv import SpawnModel, DeleteModel, GetModelState
from tf import TransformerROS

def pdu_reset(req):
    global probe_cnt

    for i in range(1,probe_number+1):
        probe_name = model_name + str(i)
        delete_probe_client(
            model_name=probe_name
        )
    probe_cnt = 0
    return TriggerResponse(True, "")

def pdu_callback(msg):
    global probe_cnt

    if (probe_cnt >= probe_number):
        return

    probe_cnt += 1
    probe_name = model_name+str(probe_cnt)
    
    pose_msg = rover_state_client(
        model_name ='leo', 
        relative_entity_name ='world')

    spawn_probe_client(
        model_name=probe_name,
        model_xml=model,
        robot_namespace='',
        initial_pose=Pose(pdu_translation, Quaternion(0,0,0,0)),
        reference_frame='leo'
    )
    print (pose_msg.pose.orientation.x)
    print (pose_msg.pose.orientation.y)
    print (pose_msg.pose.orientation.z)
    print (pose_msg.pose.orientation.w)
    pdu_dropped_pub.publish(probe_cnt)

rospy.init_node("pdu_node")

probe_number = 6
probe_cnt = 0
model_name = "probe"
pdu_translation = Point(-0.195,0,0.1)

model = rospy.get_param("/probe_description")

pdu_dropped_pub = rospy.Publisher("probe_deployment_unit/probes_dropped", UInt8, queue_size=1)
pdu_drop_sub = rospy.Subscriber("probe_deployment_unit/drop", Empty, pdu_callback)

spawn_probe_client = rospy.ServiceProxy('/gazebo/spawn_urdf_model', SpawnModel)
delete_probe_client = rospy.ServiceProxy('/gazebo/delete_model', DeleteModel)
rover_state_client = rospy.ServiceProxy('/gazebo/get_model_state', GetModelState)
pdu_reset_srv = rospy.Service("probe_delployment_unit/home", Trigger, pdu_reset)

rospy.spin()
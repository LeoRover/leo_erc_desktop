#!/usr/bin/env python

import rospy

from geometry_msgs.msg import Point, Quaternion, Pose
from std_srvs.srv import Trigger, TriggerResponse
from std_msgs.msg import Empty, UInt8
from gazebo_msgs.srv import SpawnModel, DeleteModel


def pdu_reset(req):
    global probe_cnt
    global delete_probe_client
    global probe_number
    global model_name


    for i in range(1,probe_number+1):
        probe_name = model_name + str(i)
        delete_probe_client(
            model_name=probe_name
        )
    probe_cnt = 0
    return TriggerResponse(True, "")


def pdu_callback(msg):
    global probe_cnt
    global probe_number
    global model_name
    global spawn_probe_client
    global model
    global pdu_translation

    if (probe_cnt >= probe_number):
        return

    probe_cnt += 1
    probe_name = model_name+str(probe_cnt)
    # count probe orientation
    pdu_orientation = Quaternion(0,0,0,0)

    spawn_probe_client(
        model_name=probe_name,
        model_xml=model,
        robot_namespace='',
        initial_pose=Pose(pdu_translation, pdu_orientation),
        reference_frame='leo'
    )


rospy.init_node("pdu_node")

probe_number = 6
probe_cnt = 0
model_name = "probe"
# upewnić się że można liczyć od base_footprint
pdu_translation = Point(-0.19500,0,0.19483)
spawn_probe_client = rospy.ServiceProxy('/gazebo/spawn_urdf_model', SpawnModel)
delete_probe_client = rospy.ServiceProxy('/gazebo/delete_model', DeleteModel)
model = rospy.get_param("/probe_description")

pdu_dropped_pub = rospy.Publisher("probe_deployment_unit/probes_dropped", UInt8, queue_size=1)
pdu_drop_sub = rospy.Subscriber("probe_deployment_unit/drop", Empty, pdu_callback)
pdu_reset_srv = rospy.Service("probe_delployment_unit/home", Trigger, pdu_reset)


rospy.spin()